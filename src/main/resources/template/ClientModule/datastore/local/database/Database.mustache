package {{packageName}}.{{featureName}}.datastore.local.database

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import {{packageName}}.{{featureName}}.datastore.local.converter.Converters
import {{packageName}}.{{featureName}}.datastore.local.dao.{{feature}}Dao
import {{packageName}}.{{featureName}}.datastore.local.entity.{{feature}}Entity

@Database(entities = [{{feature}}Entity::class],
    version = 1, exportSchema = false)
@TypeConverters(Converters::class)
abstract class {{feature}}Database: RoomDatabase() {

    abstract fun {{featureName}}Dao(): {{feature}}Dao

    companion object {
        private var instance: {{feature}}Database? = null

        @JvmStatic @Synchronized
        fun getInstance(applicationContext: Context): {{feature}}Database {
            if (instance == null) {
                instance = Room.databaseBuilder(applicationContext,
                    {{feature}}Database::class.java,
                    "{{appName}}.db")
                    .fallbackToDestructiveMigration()
                    .build()
            }

            return instance!!
        }
    }
}