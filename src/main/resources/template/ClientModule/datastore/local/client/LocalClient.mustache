package {{packageName}}.{{featureName}}.datastore.local.client

import {{packageName}}.{{featureName}}.datastore.local.I{{feature}}Store
import {{packageName}}.{{featureName}}.datastore.local.dao.{{feature}}Dao
import {{packageName}}.{{featureName}}.datastore.local.database.{{feature}}Database
import {{packageName}}.{{featureName}}.datastore.local.entity.{{feature}}Entity
import javax.inject.Inject

class {{className}} @Inject constructor(private val context: Application):
    I{{feature}}Store {

    private var {{featureName}}Dao: {{feature}}Dao

    init {
        val database = {{feature}}Database.getInstance(context)
        {{featureName}}Dao = database.{{featureName}}Dao()
    }

    override suspend fun save{{feature}}({{featureName}}: {{feature}}): Boolean {
        return try {
            {{featureName}}Dao.addEntity({{feature}}Entity({{featureName}}))
            true
        } catch (e: Exception) {
            false
        }
    }

    override suspend fun save{{feature}}s({{featureName}}s: List<{{feature}}>): Boolean {
        val {{featureName}}sEntities = arrayListOf<{{feature}}Entity>>()
        for ({{featureName}} in {{featureName}}s) {
            {{featureName}}sEntities.add({{feature}}Entity({{featureName}}))
        }
        return try {
            {{featureName}}Dao.addEntities({{featureName}}sEntities)
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }

    override suspend fun clear() {
        {{featureName}}Dao.clear()
    }

    override fun pagingSource(): PagingSource<Int, {{feature}}Entity> {
        return {{featureName}}Dao.pagingSource()
    }

    {{#generateAPI}}
    override suspend fun get{{feature}}s(page: Int, perPage: Int): List<{{feature}}> {
        return database.withTransaction {
            val entities = {{featureName}}Dao.getEntities((page - 1) * perPage, perPage)
            val {{featureName}}s = arrayListOf<{{feature}}>()
            for (entity in entities) {
                {{featureName}}s.add(entity.{{featureName}})
            }
            photos
        }
    }

    override suspend fun get{{feature}}ById(id: String): {{feature}}? {
        return {{featureName}}Dao.getEntity(id)?.{{featureName}}
    }

    override suspend fun delete{{feature}}ById(id: String): Unit {
        return {{featureName}}Dao.deleteById(id)
    }

    override suspend fun post{{feature}}({{featureName}}: {{feature}}): {{feature}}? {
        val {{featureName}}Entity = {{feature}}Entity({{featureName}})
        return {{featureName}}Dao.updateEntity({{featureName}}Entity)?.{{featureName}}
    }

    {{/generateAPI}}
}