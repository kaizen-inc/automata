package {{packageName}}.{{featureName}}.datastore.local.dao

import androidx.paging.PagingSource
import androidx.room.*
import {{packageName}}.{{featureName}}.datastore.local.entity.{{feature}}Entity

@Dao
abstract class {{feature}}Dao/*: BaseDao<{{feature}}Entity, String>()*/ {

    {{#generateAPI}}
    @Insert(onConflict = OnConflictStrategy.ABORT)
    abstract suspend fun insert(entity: {{feature}}Entity)

    @Insert(onConflict = OnConflictStrategy.ABORT)
    abstract suspend fun addEntities(entities: List<{{feature}}Entity>)

    @Insert(onConflict = OnConflictStrategy.ABORT)
    abstract suspend fun addEntity(entity: {{feature}}Entity)

    @Update(onConflict = OnConflictStrategy.REPLACE)
    abstract suspend fun update(entity: {{feature}}Entity)

    @Delete
    abstract suspend fun delete(entity: {{feature}}Entity)

    @Query("select exists(select * from {{feature}}Entity where id = :id)")
    abstract suspend fun exists(id: String): Boolean

    @Query("select * from {{feature}}Entity where id = :id")
    abstract suspend fun getEntity(id: String): {{feature}}Entity?

    @Query("select * from {{feature}}Entity")
    abstract suspend fun getEntities(): List<{{feature}}Entity>

    @Query("select * from {{feature}}Entity LIMIT :limit OFFSET :offset")
    abstract suspend fun getEntities(offset: Int, limit: Int): List<{{feature}}Entity>

    @Query("select * from {{feature}}Entity ORDER BY RANDOM() LIMIT :limit")
    abstract suspend fun getRandomEntities(limit: Int): List<{{feature}}Entity>

    @Query("delete from {{feature}}Entity")
    abstract suspend fun clear()

    @Query("select * from {{feature}}Entity")
    abstract fun pagingSource(): PagingSource<Int, {{feature}}Entity>
    {{/generateAPI}}
}