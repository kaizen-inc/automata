package {{completePackageName}}

import androidx.compose.runtime.LaunchedEffect
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.navigation.*
import androidx.navigation.compose.composable
import {{packageName}}.{{featureName}}.ui.screen.{{feature}}DetailsScreen
import {{packageName}}.{{featureName}}.ui.screen.{{feature}}StatisticsScreen
import {{packageName}}.{{featureName}}.ui.screen.{{feature}}Screen
import {{packageName}}.{{featureName}}.viewmodel.{{feature}}ViewModel

fun NavGraphBuilder.{{featureName}}sScreen(
    //    onNavigateTo{{feature}}: ({{featureName}}Id: String) -> Unit
    navController: NavHostController,
    stateUpdater: () -> Unit) {
        composable({{feature}}Destination.{{featureName}}s) {
            stateUpdater()
            val viewModel = hiltViewModel<{{feature}}ViewModel>()
            //        LaunchedEffect(Unit) {
            ////            valiViewModel.randomPhotos()
            //            valiViewModel.editorialPhotos()
            //        }

            {{feature}}sScreen(viewModel, navController)
        }
    }

fun NavGraphBuilder.{{featureName}}Screen(
    navController: NavHostController,
    stateUpdater: () -> Unit) {
        composable(
            {{feature}}Destination.{{featureName}},
            arguments = listOf(navArgument("id") { type = NavType.StringType })
        ) { backStackEntry ->
            stateUpdater()
            val viewModel = hiltViewModel<{{feature}}ViewModel>()

            val {{featureName}}Id = backStackEntry.arguments?.getString("id")!!
            LaunchedEffect({{featureName}}Id) { //TODO just a workaround for a bug that call composable multiple times, to be removed later
                viewModel.get{{feature}}ById({{featureName}}Id)
            }

            {{feature}}DetailsScreen(viewModel, navController)
        }
    }