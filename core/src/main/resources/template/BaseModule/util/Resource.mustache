package {{packageName}}.base.util

enum class Status {
    Success,
    Error,
    Loading,
    Init,
    NoResult
}

data class Resource<out T>(val status: Status, val data: T?, val message: String) {
    companion object {
        fun <T> init(): Resource<T> = Resource(status = Status.Init, data = null, message = "initialized")

        fun <T> success(data: T): Resource<T> = Resource(status = Status.Success, data = data, message = "")

        fun <T> error(data: T, message: String = ""): Resource<T> =
            Resource(status = Status.Error, data = data, message = message)

//        fun <T> loading(data: T?): Resource<T> = Resource(status = Status.Loading, data = data, message = "")
        fun <T> loading(): Resource<T> = Resource(status = Status.Loading, data = null, message = "")

        fun <T> noResult(): Resource<T> = Resource(status = Status.NoResult, data = null, message = "No Result")
    }
}
