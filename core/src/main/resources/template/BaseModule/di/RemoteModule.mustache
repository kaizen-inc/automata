package {{packageName}}.base.di

import inc.kaizen.client.vali.infrastructure.ValiClient
import android.content.SharedPreferences
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import {{packageName}}.base.di.PreferenceModule
import okhttp3.Interceptor
import okhttp3.Request
import java.util.concurrent.locks.ReentrantLock
import javax.inject.Singleton

@Module(includes = [PreferenceModule::class])
@InstallIn(SingletonComponent::class)
class RemoteModule {

    private val keyAccessToken = "accessToken"

    @Provides
    @Singleton
    fun provideApiClient(interceptor: Interceptor): ValiClient {
        return ValiClient(interceptor)
    }

    @Provides
    @Singleton
    fun provideInterceptor(token: String): Interceptor {
        return Interceptor { chain ->
            val request: Request = chain
                .request()
                .newBuilder()
                .addHeader("Accept-Version", "v1")
                .addHeader("Authorization", "Bearer $token" )
                .build()
            chain.proceed(request)
        }
    }

    @Provides
    @Singleton
    fun provideToken(mPrefs: SharedPreferences, mPrefsLock: ReentrantLock): String {
        mPrefsLock.lock()
        return try {
            mPrefs.getString(keyAccessToken, null) ?: ""
        } finally {
            mPrefsLock.unlock()
        }
    }
}