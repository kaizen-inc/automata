package {{packageName}}.base.ui.component

import android.webkit.WebViewClient
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.runtime.Composable
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import kotlinx.coroutines.launch

@Composable
fun NavigateBack(navController: NavController, modifier: Modifier = Modifier) {
    val color = Color.Black.copy(0.6f)

    Icon(
        Icons.Default.ArrowBack,
        "Back",
        tint = Color.White,
        modifier = modifier
            .padding(16.dp)
            .background(color, RoundedCornerShape(5.dp))
            .padding(4.dp)
            .clickable {
                navController.popBackStack()
            }
    )
}

@Composable
fun ErrorPage(error: String) {
    Box(modifier = Modifier
        .fillMaxSize()) {
        Text(
            text = error,
            color = Color.Red,
            fontFamily = FontFamily.Monospace,
            fontWeight = FontWeight.Bold,
            fontSize = 28.sp,
            modifier = Modifier
                .fillMaxSize()
                .align(Alignment.Center)
        )
    }
}

@Composable
fun InitPage(message: String) {
    Box(modifier = Modifier
        .fillMaxSize()) {
        Text(
            text = message,
            color = Color.Black,
            fontFamily = FontFamily.Monospace,
            fontWeight = FontWeight.Bold,
            fontSize = 28.sp,
            modifier = Modifier
                .fillMaxSize()
                .align(Alignment.Center)
        )
    }
}


@Composable
fun LoadingPage(loading: String) {
    Box(
        modifier = Modifier
            .fillMaxSize(),
        contentAlignment = Alignment.Center,
    ) {
        Text(
            text = loading,
            color = Color.Red,
            fontFamily = FontFamily.Monospace,
            fontWeight = FontWeight.Bold,
            fontSize = 16.sp,
            modifier = Modifier
                .fillMaxSize()
                .align(Alignment.Center)
            //TODO add loader
        )
        CircularProgressIndicator()
    }
    WebViewClient()
}


@Composable
fun NoResultPage(warning: String) {
    Box(modifier = Modifier
        .fillMaxSize()) {
        Text(
            text = warning,
            color = Color.Red,
            fontFamily = FontFamily.Monospace,
            fontWeight = FontWeight.Bold,
            fontSize = 28.sp,
            modifier = Modifier
                .fillMaxSize()
                .align(Alignment.Center)
        )
    }
}

@OptIn(ExperimentalMaterialApi::class)
@Composable
fun ShowSnackBar(
    message: String,
    actionLabel: String,
    actionPerformed: () -> Unit,
    dismissed: () -> Unit,
    scaffoldState: BottomSheetScaffoldState
) {
    val coroutineScope = rememberCoroutineScope()
    val showSnackBar: (
        message: String?,
        actionLabel: String,
        actionPerformed: () -> Unit,
        dismissed: () -> Unit
    ) -> Unit = { message, actionLabel, actionPerformed, dismissed ->
        coroutineScope.launch {
            val snackBarResult = scaffoldState.snackbarHostState.showSnackbar(
                message = message.toString(),
                actionLabel = actionLabel
            )
            when (snackBarResult) {
                SnackbarResult.ActionPerformed -> actionPerformed.invoke()
                SnackbarResult.Dismissed -> dismissed.invoke()
            }
        }
    }

    showSnackBar.invoke(
        message,
        actionLabel,
        actionPerformed,
        dismissed
    )
}

@Composable
fun ShowSnackBar(
    message: String,
    actionLabel: String,
    actionPerformed: () -> Unit,
    dismissed: () -> Unit,
    scaffoldState: ScaffoldState
) {
    val coroutineScope = rememberCoroutineScope()
    val showSnackBar: (
        message: String?,
        actionLabel: String,
        actionPerformed: () -> Unit,
        dismissed: () -> Unit
    ) -> Unit = { message, actionLabel, actionPerformed, dismissed ->
        coroutineScope.launch {
            val snackBarResult = scaffoldState.snackbarHostState.showSnackbar(
                message = message.toString(),
                actionLabel = actionLabel
            )
            when (snackBarResult) {
                SnackbarResult.ActionPerformed -> actionPerformed.invoke()
                SnackbarResult.Dismissed -> dismissed.invoke()
            }
        }
    }

    showSnackBar.invoke(
        message,
        actionLabel,
        actionPerformed,
        dismissed
    )
}