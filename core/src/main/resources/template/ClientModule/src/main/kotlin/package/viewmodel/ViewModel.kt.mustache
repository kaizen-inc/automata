package {{packageName}}.viewmodel

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
import androidx.lifecycle.ViewModel
//import androidx.lifecycle.viewModelScope
import androidx.paging.ExperimentalPagingApi
//import androidx.paging.Pager
//import androidx.paging.PagingConfig
//import androidx.paging.PagingData
//import androidx.paging.cachedIn
import dagger.hilt.android.lifecycle.HiltViewModel
import {{packageName}}.base.util.Resource
import {{packageName}}.datastore.repository.I{{feature}}Repository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.launch
import javax.inject.Inject

@OptIn(ExperimentalPagingApi::class)
@HiltViewModel
class {{feature}}ViewModel @Inject constructor(
private val repository: I{{feature}}Repository,
    //{{featureName}}PagingSource: {{feature}}PagingSource,
    //{{featureName}}RemoteMediator: {{feature}}RemoteMediator
): ViewModel() {

    //val {{featureName}}s: Flow<PagingData<{{feature}}>>

    init {
        //{{featureName}}s = Pager(
        //config = PagingConfig(pageSize = 10, initialLoadSize = 10, prefetchDistance = 10),
            //remoteMediator = photoRemoteMediator,
            //pagingSourceFactory = {
                //photoPagingSource
            //}).flow.cachedIn(viewModelScope)
    }
}