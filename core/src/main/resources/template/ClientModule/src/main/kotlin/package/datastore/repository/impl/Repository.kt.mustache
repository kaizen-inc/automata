package {{packageName}}.datastore.repository.impl

import {{packageName}}.util.Either
import {{packageName}}.util.left
import {{packageName}}.util.right
{{! where would be the model classes? }}
{{! import *.model.* }}
import {{packageName}}.datastore.I{{feature}}DataStore
import {{packageName}}.datastore.local.I{{feature}}Store
import {{packageName}}.datastore.repository.I{{feature}}Repository

class {{feature}}Repository(
        private val remoteDataStore: I{{feature}}DataStore,
        private val localDataStore: I{{feature}}Store,
        private val isNetworkAvailable: Boolean,
        private val canFetchData: Boolean
    ): I{{feature}}Repository {

    {{#generateAPI}}
        override suspend fun get{{feature}}s(
            page: Int,
            perPage: Int,
        ): Either<List<{{feature}}>, Exception> {
            return try {
                val result = remoteDataStore.get{{feature}}s(page, perPage)
                left(result)
            } catch (e: Exception) {
                right(e)
            }
        }

        override suspend fun get{{feature}}ById(id: String): Either<{{feature}}?, Exception> {
            return try {
                var result = localDataStore.get{{feature}}ById(id)
                if (result == null) {
                    result = remoteDataStore.get{{feature}}ById(id)
                }
                left(result)
            } catch (e: Exception) {
                right(e)
            }
        }

        override suspend fun delete{{feature}}ById(id: String):  Either<Unit, Exception> {
            return try {
                var result = localDataStore.delete{{feature}}ById(id)
                if (result == null) {
                    result = remoteDataStore.delete{{feature}}ById(id)
                }
                left(result)
            } catch (e: Exception) {
                right(e)
            }
        }

        override suspend fun post{{feature}}({{featureName}}: {{feature}}): Either<{{feature}}?, Exception> {
            return try {
                var result = localDataStore.post{{feature}}({{featureName}}
                if (result == null) {
                    result = remoteDataStore.post{{feature}}({{featureName}}
                }
                left(result)
            } catch (e: Exception) {
                right(e)
            }
        }

        override suspend fun update{{feature}}({{featureName}}: {{feature}}): Either<{{feature}}?, Exception> {
            return try {
                var result = localDataStore.update{{feature}}({{featureName}}
                if (result == null) {
                    result = remoteDataStore.update{{feature}}({{featureName}}
                }
                left(result)
            } catch (e: Exception) {
                right(e)
            }
        }
    {{/generateAPI}}
}