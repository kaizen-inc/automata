package {{packageName}}.{{featureName}}.viewmodel

import androidx.paging.ExperimentalPagingApi
import androidx.paging.LoadType
import androidx.paging.PagingState
import androidx.paging.RemoteMediator
import {{packageName}}.{{featureName}}.datastore.I{{feature}}DataStore
import {{packageName}}.{{featureName}}.datastore.local.I{{feature}}Store
import {{packageName}}.{{featureName}}.datastore.local.entity.{{feature}}Entity

@OptIn(ExperimentalPagingApi::class)
class {{feature}}RemoteMediator(
private val remoteDataStore: I{{feature}}DataStore,
private val localDataStore: I{{feature}}Store
): RemoteMediator<Int, {{feature}}Entity>() {

    override suspend fun initialize(): InitializeAction {
    return InitializeAction.SKIP_INITIAL_REFRESH
    }

    override suspend fun load(
        loadType: LoadType,
        state: PagingState<Int, {{feature}}Entity>
    ): MediatorResult {
        try {
            val page =  when(loadType) {
                LoadType.PREPEND -> return MediatorResult.Success(true)
                LoadType.REFRESH -> 1
                LoadType.APPEND -> {
                    val lastItem = state.lastItemOrNull()
                    if(lastItem == null) {
                        1
                    } else {
                        (lastItem.index / state.config.pageSize) + 1
                    }
                }
            }

            if (loadType == LoadType.REFRESH) {
                localDataStore.clear()
            }

            val result = remoteDataStore.get{{feature}}s(page = page, perPage = state.config.pageSize)
            localDataStore.save{{feature}}s(result)
            return MediatorResult.Success(
                endOfPaginationReached = result.isEmpty()
            )
        } catch (e: Exception) {
            return MediatorResult.Error(e)
        }
    }
}