package {{packageName}}.{{featureName}}.datastore.remote.client

{{! where would be the model classes? }}
{{! import *.model.* }}
{{! import *.client.* }}
import {{packageName}}.{{featureName}}.datastore.I{{feature}}DataStore
import javax.inject.Inject

class {{feature}}RemoteClient @Inject constructor(private val client: {{appName}}Client):
    I{{feature}}DataStore {

    {{#generateAPI}}
    override suspend fun getPhotos(page: Int, perPage: Int): List<{{feature}}> {
        return client.get{{feature}}s(page, perPage)
    }

    override suspend fun get{{feature}}ById(id: String): {{feature}} {
        return client.get{{feature}}ById(id)
    }

    override suspend fun delete{{feature}}ById(id: String): Unit {
        return client.delete{{feature}}ById(id)
    }

    override suspend fun post{{feature}}({{featureName}}: {{feature}}): {{feature}}? {
        return client.post{{feature}}({{featureName}})
    }

    override suspend fun update{{feature}}({{featureName}}: {{feature}}): {{feature}} {
        return client.update{{feature}}({{featureName}})
    }
    {{/generateAPI}}
}